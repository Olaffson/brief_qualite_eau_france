name: CI

on:
  workflow_dispatch: {}
  # schedule:
  #   - cron: "30 5 * * 1"

jobs:
  run-ingest:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      AZURE_STORAGE_CONNECTION_STRING: ${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Show repo tree (debug)
        run: ls -la && echo "---" && ls -la notebooks

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: "notebooks/01_ingest_qualite_eau/requirements.txt" 

      - name: Install deps
        working-directory: notebooks/01_ingest_qualite_eau
        run: pip install -r requirements.txt

      - name: Ingest zip
        working-directory: notebooks/01_ingest_qualite_eau
        run: python 01_ingest_zip.py

      - name: Unzip
        working-directory: notebooks/01_ingest_qualite_eau
        run: python 02_unzip.py

      - name: Build yearly PLV Parquet
        working-directory: notebooks/01_ingest_qualite_eau
        run: python 03_build_parquet_plv.py

      - name: Build yearly RESULT Parquet
        working-directory: notebooks/01_ingest_qualite_eau
        run: python 04_build_parquet_result.py

  run-pipeline:
    needs: run-ingest
    runs-on: ubuntu-latest
    env:
      DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
      DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Validate pipeline config
        run: |
          test -f config/pipeline_config.json
          jq . config/pipeline_config.json > /dev/null

      - name: Create or Reset Databricks Job from config/pipeline_config.json
        id: upsert_job
        run: |
          set -euo pipefail
          CONFIG_PATH="config/pipeline_config.json"
          JOB_NAME=$(jq -r '.name' "$CONFIG_PATH")

          echo "üîé Recherche du job Databricks nomm√©: $JOB_NAME"
          LIST_JSON=$(curl -s -H "Authorization: Bearer $DATABRICKS_TOKEN" \
            "$DATABRICKS_HOST/api/2.1/jobs/list")

          JOB_ID=$(echo "$LIST_JSON" | jq -r --arg NAME "$JOB_NAME" \
            '.jobs[]? | select(.settings.name == $NAME) | .job_id' | head -n1)

          if [ -z "$JOB_ID" ] || [ "$JOB_ID" = "null" ]; then
            echo "üÜï Job inexistant ‚Üí cr√©ation via /jobs/create"
            CREATE_RESP=$(curl -s -X POST "$DATABRICKS_HOST/api/2.1/jobs/create" \
              -H "Authorization: Bearer $DATABRICKS_TOKEN" \
              -H "Content-Type: application/json" \
              --data-binary @"$CONFIG_PATH")
            echo "$CREATE_RESP"
            JOB_ID=$(echo "$CREATE_RESP" | jq -r '.job_id')
            if [ -z "$JOB_ID" ] || [ "$JOB_ID" = "null" ]; then
              echo "‚ùå √âchec de cr√©ation du job"; exit 1
            fi
          else
            echo "‚úîÔ∏è Job existe (ID=$JOB_ID) ‚Üí reset avec la nouvelle configuration"
            # Construit le payload { "job_id": <id>, "new_settings": <contenu json> }
            PAYLOAD=$(jq -nc --argjson job_id "$JOB_ID" --slurpfile settings "$CONFIG_PATH" \
              '{job_id: $job_id, new_settings: $settings[0]}')
            RESET_RESP=$(curl -s -X POST "$DATABRICKS_HOST/api/2.1/jobs/reset" \
              -H "Authorization: Bearer $DATABRICKS_TOKEN" \
              -H "Content-Type: application/json" \
              -d "$PAYLOAD")
            echo "$RESET_RESP"
          fi

          echo "JOB_ID=$JOB_ID" >> $GITHUB_ENV
          echo "‚úÖ Job pr√™t (ID=$JOB_ID)"

      - name: Run Databricks Job
        run: |
          set -euo pipefail
          echo "üöÄ Lancement du job ID=$JOB_ID"
          RUN_RESP=$(curl -s -X POST "$DATABRICKS_HOST/api/2.1/jobs/run-now" \
            -H "Authorization: Bearer $DATABRICKS_TOKEN" \
            -H "Content-Type: application/json" \
            -d "{\"job_id\": $JOB_ID}")
          echo "$RUN_RESP"
          RUN_ID=$(echo "$RUN_RESP" | jq -r '.run_id')
          if [ -z "$RUN_ID" ] || [ "$RUN_ID" = "null" ]; then
            echo "‚ùå √âchec run-now"; exit 1
          fi
          echo "üåê Ex√©cution: $DATABRICKS_HOST/#job/$JOB_ID/run/$RUN_ID"
